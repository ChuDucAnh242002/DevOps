stages:
  - build
  - test
  - deploy

# Define a global Docker image for the entire pipeline
image: docker:20.10.21

services:
   - name: docker:20.10.21-dind
     alias: thedockerhost

variables:
    # Tell docker CLI how to talk to Docker daemon; see
    # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker-executor
    DOCKER_HOST: tcp://thedockerhost:2375/
    # Use the overlayfs driver for improved performance:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    IMAGE_NAME: "Ubuntu-22.04"
    SERVER_USER: "ubuntu"
    SERVER_IP: "195.148.21.49"


# Build stage: Build the Docker images for all services in docker-compose.yml
build:
  stage: build
  image: docker:20.10.21
  script:
    - echo "Checking the repository structure..."
    - ls -alh # List files in the repository to verify if docker-compose.yml is present
    - echo "Building the Docker images using docker-compose..."
    - docker-compose build # Explicitly reference docker-compose.yml
  artifacts:
    expire_in: 1 hour
    paths:
      - docker-compose.yml # Store docker-compose file as an artifact
  tags:
    - token1

test:
  stage: test
  image: docker:20.10.21
  script:
    - echo "Start the test environment"
    - docker-compose up --scale tests=0 -d
    - echo "Wait for services to be read"
    - sleep 5
    - docker-compose ps
    - echo "Running unit tests"
    - docker-compose run --rm tests 
    - echo "Wait for services to be read"
    - sleep 5
    - docker-compose down
  tags:
    - token1

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - command -v ssh-agent >/dev/null || ( apk update && apk add openssh-client )
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/DevOps.pem
    - chmod 400 ~/.ssh/DevOps.pem

  script:
    - echo "Deploying to cPouta virtual machine..."
    - ssh -v -o StrictHostKeyChecking=no -i ~/.ssh/DevOps.pem $SERVER_USER@$SERVER_IP "
        cd /home/ubuntu/DevOps &&
        docker-compose up -d"

  tags:
    - token1